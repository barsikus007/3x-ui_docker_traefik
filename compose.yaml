services:
  3x-ui:
    image: ghcr.io/mhsanaei/3x-ui:v2.6.2
    # build:
    #   dockerfile_inline: |
    #     FROM ghcr.io/mhsanaei/3x-ui:v2.6.2
    #     # RUN chown -R ${USER_ID?}:${USER_ID?} /app/ /usr/bin/x-ui
    #     RUN chown -R ${USER_ID?}:${USER_ID?} /app/
    #     USER ${USER_ID?}
    container_name: 3x-ui
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./db/:/etc/x-ui/
    environment:
      TZ: ${TZ?}
      # XRAY_VMESS_AEAD_FORCED: "false"  # Disabled for compatibility with non-AEAD clients (seems useless)
      # XUI_ENABLE_FAIL2BAN: "true"  # Enabled by default
    tty: true
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.3xui-admin.rule: Host(`admin.${HOST?}`) && PathPrefix(`/${ADMIN_PATH}`)
      traefik.http.routers.3xui-admin.service: 3xui-admin
      traefik.http.services.3xui-admin.loadbalancer.server.port: 2053  # panel
      traefik.http.routers.3xui-admin.entrypoints: webSecure
      traefik.http.routers.3xui-admin.tls.certresolver: ddnsResolver

      traefik.http.routers.3xui-sub.rule: Host(`sub.${HOST?}`) && PathPrefix(`/${SUB_PATH}`)
      traefik.http.routers.3xui-sub.service: 3xui-sub
      traefik.http.services.3xui-sub.loadbalancer.server.port: 2096  # subs
      traefik.http.routers.3xui-sub.entrypoints: webSecure
      traefik.http.routers.3xui-sub.tls.certresolver: ddnsResolver

      traefik.tcp.routers.3xui-sni.rule: HostSNI(`${HOST_MASK?}`) || HostSNI(`*`)
      traefik.tcp.routers.3xui-sni.service: 3xui-sni
      traefik.tcp.services.3xui-sni.loadbalancer.server.port: 443
      traefik.tcp.services.3xui-sni.loadbalancer.proxyProtocol.version: 2
      # traefik.tcp.services.3xui-sni.serverstransport.proxyProtocol:
      traefik.tcp.routers.3xui-sni.entrypoints: webSecure
      traefik.tcp.routers.3xui-sni.tls.passthrough: true
    # ports:
    #   - 2053:2053  # panel
    #   - 2096:2096  # subs


  traefik:
    # The official v3 Traefik docker image
    image: traefik:v3.5
    container_name: traefik
    # network_mode: host
    # hostname: ${HOST?}
    restart: unless-stopped
    ports:
      # The HTTP port
      - 80:80
      # The HTTPS port
      - 443:443
      # The Web UI (enabled by --api.insecure=true)
      # - 8080:8080
    command:
      - --log.level=INFO
      # - --log.level=DEBUG
      # TODO: Uncomment to debug SSL and enable dashboard.
      # - --api.insecure=true
      - --providers.docker.exposedByDefault=false
      # TODO: Comment to debug dynamic configs.
      - --providers.file.watch=false
      - --entryPoints.web.address=:80
      - --entryPoints.web.http.redirections.entryPoint.to=webSecure
      - --entryPoints.web.http.redirections.entryPoint.scheme=https
      - --entryPoints.web.http.redirections.entryPoint.permanent=true
      - --entryPoints.webSecure.address=:443
      - --entryPoints.webSecure.http.tls.domains[0].main=${HOST?}
      - --entryPoints.webSecure.http.tls.domains[0].sans=*.${HOST?}
      - --entryPoints.webSecure.http.tls.certResolver=ddnsResolver
      - --certificatesResolvers.ddnsResolver.acme.email=${HOST_EMAIL?}
      - --certificatesResolvers.ddnsResolver.acme.dnsChallenge.provider=${PROVIDER_NAME?}
      # TODO duckdns fix https://www.reddit.com/r/Traefik/comments/149dplx/traefik_duckdns_dns_challenge_problem/
      # - --certificatesResolvers.ddnsResolver.acme.dnsChallenge.disablePropagationCheck=true
      # TODO: Uncomment to debug SSL.
      # - --certificatesResolvers.ddnsResolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.ddnsResolver.acme.storage=/letsencrypt/acme.json
    env_file:
      - .provider.env
    volumes:
      - /etc/localtime:/etc/localtime:ro
      # Create a letsencrypt dir within the folder where the docker-compose file is
      - ./traefik/letsencrypt/:/letsencrypt/
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
